{"version":3,"sources":["utils/Constants.js","services/stock.service.js","components/Form.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Constants","svcUrl","StockService","getResults","data","callback","query","symbol","allotment","cost","sell_price","buy_commission","sell_commission","tax","axios","get","then","resp","Form","props","handleChange","event","state","target","name","value","length","errors","setState","handleSubmit","validateForm","Object","values","filter","v","showData","keys","forEach","Number","bind","console","log","this","className","type","onChange","htmlFor","onClick","Component","Results","proceeds","realized_cost","purchase_price","tax_on_capital_gain","realized_profit","return_on_investment","break_even","App","handleData","hasData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9865c2cd.chunk.js","sourcesContent":["const Constants = {\r\n    svcUrl: 'https://stock-app-285.wl.r.appspot.com'\r\n    // svcUrl: 'http://localhost:3001'\r\n};\r\n\r\nexport default Constants;","import axios from 'axios';\r\nimport Constants from \"../utils/Constants\";\r\n\r\nconst StockService = () => {}\r\n\r\nStockService.getResults = (data, callback) => {\r\n    const query = `symbol=${data.symbol}&allotment=${data.allotment}&&cost=${data.cost}&sell_price=${data.sell_price}&buy_commission=${data.buy_commission}&sell_commission=${data.sell_commission}&tax=${data.tax}`;\r\n    axios.get(Constants.svcUrl + '/getResults?' + query).then(resp => {\r\n        callback(resp.data);\r\n    })\r\n}\r\n\r\nexport default StockService;","import React, { Component } from \"react\";\r\nimport StockService from \"../services/stock.service\";\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            symbol: '',\r\n            allotment: '',\r\n            cost: '',\r\n            sell_price: '',\r\n            buy_commission: '',\r\n            sell_commission: '',\r\n            tax: '',\r\n            errors: {\r\n                symbol: '',\r\n                allotment: '',\r\n                cost: '',\r\n                sell_price: '',\r\n                buy_commission: '',\r\n                sell_commission: '',\r\n                tax: ''\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        let state = this.state;\r\n        state[event.target.name] = event.target.value;\r\n        if(event.target.value.length === 0) state.errors[event.target.name] = 'This field is required';\r\n        else state.errors[event.target.name] = '';\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.validateForm(() => {\r\n            if(Object.values(this.state.errors).filter(v => v !== '').length === 0) {\r\n                StockService.getResults(this.state, data => {\r\n                    if(data){\r\n                        this.props.showData(data);\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    validateForm = (callback) => {\r\n        let state = this.state;\r\n        Object.keys(state.errors).forEach(v => {\r\n            if(state[v].length === 0) state.errors[v] = 'This field is required';\r\n            else if(v === 'allotment' && Number(state[v]) <=0) state.errors[v] = 'Cannot be zero';\r\n            else state.errors[v] = '';\r\n        });\r\n        this.setState(state,callback);\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return(\r\n            <div className='formDiv'>\r\n                <div className='formElem'>\r\n                    <input name='symbol' type='text' onChange={this.handleChange} value={this.state.symbol} className='textfield' />\r\n                    <p className='error'>{this.state.errors.symbol}</p>\r\n                    <label htmlFor='symbol'>Symbol</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='allotment' type='number' onChange={this.handleChange} value={this.state.allotment} className='textfield' />\r\n                    <p className='error'>{this.state.errors.allotment}</p>\r\n                    <label htmlFor='allotment'>Allotment</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='cost' type='number' onChange={this.handleChange} value={this.state.cost} className='textfield' />\r\n                    <p className='error'>{this.state.errors.cost}</p>\r\n                    <label htmlFor='cost'>Cost</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='sell_price' type='number' onChange={this.handleChange} value={this.state.sell_price} className='textfield' />\r\n                    <p className='error'>{this.state.errors.sell_price}</p>\r\n                    <label htmlFor='sell_price'>Sell Price</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='buy_commission' type='number' onChange={this.handleChange} value={this.state.buy_commission} className='textfield' />\r\n                    <p className='error'>{this.state.errors.buy_commission}</p>\r\n                    <label htmlFor='buy_commission'>Buy Commission</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='sell_commission' type='number' onChange={this.handleChange} value={this.state.sell_commission} className='textfield' />\r\n                    <p className='error'>{this.state.errors.sell_commission}</p>\r\n                    <label htmlFor='sell_commission'>Sell Commission</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input name='tax' type='number' onChange={this.handleChange} value={this.state.tax} className='textfield' />\r\n                    <p className='error'>{this.state.errors.tax}</p>\r\n                    <label htmlFor='tax'>Tax</label>\r\n                </div>\r\n                <div className='formElem'>\r\n                    <input type='button' onClick={this.handleSubmit} className='Button' value='Submit'/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Results = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className='formDiv'>\r\n            <h3>Profit Report</h3>\r\n            <div className='formElem'>\r\n                <p className='display'>Proceeds: </p><p className='result'>{props.proceeds}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Cost: </p><p className='result'>{props.realized_cost}</p>\r\n            </div>\r\n            <h5>Cost Details</h5>\r\n            <div className='formElem'>\r\n                <p className='display'>Total Purchase Price: </p><p className='result'>{props.purchase_price}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Buy Commission: </p><p className='result'>{props.buy_commission}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Sell Commission: </p><p className='result'>{props.sell_commission}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Tax on Capital Gain at {props.tax + '%: '}</p><p className='result'>{props.tax_on_capital_gain}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Net Profit: </p><p className='result'>{props.realized_profit}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>Return On Investment: </p><p className='result'>{props.return_on_investment + '%'}</p>\r\n            </div>\r\n            <div className='formElem'>\r\n                <p className='display'>To break even,you should have a final share price of: </p><p className='result'>{props.break_even}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Results from './components/Results';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdata: {},\n\t\t\thasData: false\n\t\t};\n\t\tthis.handleData = this.handleData.bind(this);\n\t}\n\n\thandleData = (data) => {\n\t\tthis.setState({hasData: true, data: data});\n\t}\n\n\trender(){\n\t\tif(this.state.hasData)\n\t\t\treturn(<Results {...this.state.data} />)\n\t\telse\n\t\t\treturn (\n\t\t\t\t<div className='mainDiv'>\n\t\t\t\t\t<Form showData={this.handleData} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}